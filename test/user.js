process.env.NODE_ENV = 'test';const User = require('db-worker/lib/models/user');const config = require('config');const chai = require('chai');const chaiHttp = require('chai-http');const server = require('../index');const should = chai.should();chai.use(chaiHttp);describe('Users', () => {    beforeEach((done) => {        User.deleteMany({}, (err) => {            done();        });    });    describe('/GET users', () => {        it('it should not GET without auth token', (done) => {            chai.request(server)                .get('/users')                .end((err, res) => {                    res.should.have.status(401);                    done();                });        });        it('it should GET all the users', (done) => {            chai.request(server)                .get('/users')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(200);                    res.body.should.be.a('array');                    res.body.length.should.be.eql(0);                    done();                });        });    });    describe('/POST users', () => {        it('it should not POST a users without admin token', (done) => {            chai.request(server)                .post('/users')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(403);                    done();                });        });        it('it should POST a users', (done) => {            const data = {                email: "test",                password: "test",                firstName: "test",                lastName: "test",                permission: "test"            };            chai.request(server)                .post('/users')                .set('x-access-token', config.ADMIN_TOKEN)                .send(data)                .end((err, res) => {                    res.should.have.status(201);                    res.body.should.have.property('message').eql('Successfully created!');                    done();                });        });    });    describe('/GET/:id users', () => {        it('it should GET a users by the given id', (done) => {            let data = new User({                email: "test",                password: "test",                firstName: "test",                lastName: "test",                permission: "test"            });            data.save((err, user) => {                chai.request(server)                    .get('/users/' + user.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send(user)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.be.a('object');                        res.body.should.have.property('email');                        res.body.should.have.property('password');                        res.body.should.have.property('firstName');                        res.body.should.have.property('lastName');                        res.body.should.have.property('permission');                        res.body.should.have.property('_id').eql(user.id);                        done();                    });            });        });    });    describe('/PUT/:id users', () => {        it('it should UPDATE a users given the id', (done) => {            let data = new User({                email: "test",                password: "test",                firstName: "test",                lastName: "test",                permission: "test"            });            data.save((err, user) => {                chai.request(server)                    .put('/users/' + user.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send({                        email: "test12",                        password: "test12",                        firstName: "test12",                        lastName: "test12",                        permission: "test12"                    })                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully updated!');                        done();                    });            });        });    });    describe('/DELETE/:id users', () => {        it('it should DELETE a users given the id', (done) => {            let data = new User({                email: "test1",                password: "test",                firstName: "test",                lastName: "test",                permission: "test"            });            data.save((err, user) => {                chai.request(server)                    .delete('/users/' + user.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully deleted!');                        done();                    });            });        });    });});