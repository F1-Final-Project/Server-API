process.env.NODE_ENV = 'test';const News = require('db-worker/lib/models/news');const config = require('config');const chai = require('chai');const chaiHttp = require('chai-http');const server = require('../index');const should = chai.should();chai.use(chaiHttp);describe('News', () => {    beforeEach((done) => {        News.deleteMany({}, (err) => {            done();        });    });    describe('/GET news', () => {        it('it should not GET without auth token', (done) => {            chai.request(server)                .get('/news')                .end((err, res) => {                    res.should.have.status(401);                    done();                });        });        it('it should GET all the news', (done) => {            chai.request(server)                .get('/news')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(200);                    res.body.should.be.a('array');                    res.body.length.should.be.eql(0);                    done();                });        });    });    describe('/POST news', () => {        it('it should not POST a news without admin token', (done) => {            chai.request(server)                .post('/news')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(403);                    done();                });        });        it('it should POST a news', (done) => {            const data = {                title: "Test1",                text: "Test2",                img: "Test3"            };            chai.request(server)                .post('/news')                .set('x-access-token', config.ADMIN_TOKEN)                .send(data)                .end((err, res) => {                    res.should.have.status(201);                    res.body.should.have.property('message');                    done();                });        });    });    describe('/GET/:id news', () => {        it('it should GET a news by the given id', (done) => {            let data = new News({                title: "Test1",                text: "Test2",                img: "Test3"            });            data.save((err, news) => {                chai.request(server)                    .get('/news/' + news.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send(news)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.be.a('object');                        res.body.should.have.property('title');                        res.body.should.have.property('text');                        res.body.should.have.property('img');                        res.body.should.have.property('_id').eql(news.id);                        done();                    });            });        });    });});