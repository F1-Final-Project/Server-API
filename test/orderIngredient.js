process.env.NODE_ENV = 'test';const OrderIngredient = require('db-worker/lib/models/orderIngredient');const config = require('config');const chai = require('chai');const chaiHttp = require('chai-http');const server = require('../index');const should = chai.should();chai.use(chaiHttp);describe('Order Ingredient', () => {    beforeEach((done) => {        OrderIngredient.deleteMany({}, (err) => {            done();        });    });    it('it should GET all the order-ingredients', (done) => {        chai.request(server)            .get('/order-ingredients')            .end((err, res) => {                res.should.have.status(200);                res.body.should.be.a('array');                res.body.length.should.be.eql(0);                done();            });    });    describe('/POST order-ingredients', () => {        it('it should POST a order-ingredients', (done) => {            const data = {                order: [],                orderCategory: "5dde5cec34c8db8dfb7d0cb6",                editingOrder: false,                pendingOrder: false,                orderHasArrived: false            };            chai.request(server)                .post('/order-ingredients')                .send(data)                .end((err, res) => {                    res.should.have.status(201);                    res.body.should.be.a('object');                    res.body.should.have.property('orderCategory');                    res.body.should.have.property('editingOrder');                    res.body.should.have.property('pendingOrder');                    res.body.should.have.property('orderHasArrived');                    done();                });        });    });    describe('/PUT/:id order-ingredients', () => {        it('it should UPDATE a order-ingredients given the id', (done) => {            let data = new OrderIngredient({                order: [],                orderCategory: "5dde5cec34c8db8dfb7d0cb6",                editingOrder: false,                pendingOrder: false,                orderHasArrived: false            });            data.save((err, order) => {                chai.request(server)                    .put('/order-ingredients/' + order.id)                    .send({                        order: [],                        orderCategory: "5dde5cec34c8db8dfb7d0cb6",                        editingOrder: false,                        pendingOrder: true,                        orderHasArrived: false                    })                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully updated!');                        done();                    });            });        });    });    describe('/DELETE/:id order-ingredients', () => {        it('it should DELETE a order-ingredients given the id', (done) => {            let data = new OrderIngredient({                order: [],                orderCategory: "5dde5cec34c8db8dfb7d0cb6",                editingOrder: false,                pendingOrder: false,                orderHasArrived: false            });            data.save((err, order) => {                chai.request(server)                    .delete('/order-ingredients/' + order.id)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully deleted!');                        done();                    });            });        });    });});