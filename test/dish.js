process.env.NODE_ENV = 'test';const Dish = require('db-worker/lib/models/dish');const config = require('config');const chai = require('chai');const chaiHttp = require('chai-http');const server = require('../index');const should = chai.should();chai.use(chaiHttp);describe('Dish', () => {    beforeEach((done) => {        Dish.deleteMany({}, (err) => {            done();        });    });    describe('/GET dishes', () => {        it('it should not GET without auth token', (done) => {            chai.request(server)                .get('/dishes')                .end((err, res) => {                    res.should.have.status(401);                    done();                });        });        it('it should GET all the dishes', (done) => {            chai.request(server)                .get('/dishes')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(200);                    res.body.should.be.a('array');                    res.body.length.should.be.eql(0);                    done();                });        });    });    describe('/POST dishes', () => {        it('it should not POST a dishes without admin token', (done) => {            chai.request(server)                .post('/dishes')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(403);                    done();                });        });        it('it should POST a dishes', (done) => {            const data = {                title: "",                description: "",                img: "",                category: "5dd0a8c6084bb372ff2e619b",                ingredients: [],                additionalIngredients: [],                price: 1,                weight: 1            };            chai.request(server)                .post('/dishes')                .set('x-access-token', config.ADMIN_TOKEN)                .send(data)                .end((err, res) => {                    res.should.have.status(201);                    res.body.should.be.a('object');                    res.body.should.have.property('title');                    res.body.should.have.property('description');                    res.body.should.have.property('img');                    res.body.should.have.property('category');                    res.body.should.have.property('ingredients');                    res.body.should.have.property('additionalIngredients');                    res.body.should.have.property('price');                    res.body.should.have.property('weight');                    done();                });        });    });    describe('/GET/:id dishes', () => {        it('it should GET a dishes by the given id', (done) => {            let data = new Dish({                title: "",                description: "",                img: "",                category: "5dd0a8c6084bb372ff2e619b",                ingredients: [],                additionalIngredients: [],                price: 1,                weight: 1            });            data.save((err, dishes) => {                chai.request(server)                    .get('/dishes/' + dishes.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send(dishes)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.be.a('object');                        res.body.should.have.property('title');                        res.body.should.have.property('ingredients');                        res.body.should.have.property('additionalIngredients');                        res.body.should.have.property('price');                        res.body.should.have.property('weight');                        res.body.should.have.property('_id').eql(dishes.id);                        done();                    });            });        });    });    describe('/PUT/:id dishes', () => {        it('it should UPDATE a dishes given the id', (done) => {            let data = new Dish({                title: "",                description: "",                img: "",                category: "5dd0a8c6084bb372ff2e619b",                ingredients: [],                additionalIngredients: [],                price: 1,                weight: 1            });            data.save((err, dishes) => {                chai.request(server)                    .put('/dishes/' + dishes.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send({                        title: "",                        description: "",                        img: "",                        category: "5dd0a8c6084bb372ff2e619b",                        ingredients: [],                        additionalIngredients: [],                        price: 1,                        weight: 1222                    })                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully updated!');                        done();                    });            });        });    });    describe('/DELETE/:id dishes', () => {        it('it should DELETE a dishes given the id', (done) => {            let data = new Dish({                title: "",                description: "",                img: "",                category: "5dd0a8c6084bb372ff2e619b",                ingredients: [],                additionalIngredients: [],                price: 1,                weight: 1            });            data.save((err, dishes) => {                chai.request(server)                    .delete('/dishes/' + dishes.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully deleted!');                        done();                    });            });        });    });});