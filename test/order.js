process.env.NODE_ENV = 'test';const Order = require('db-worker/lib/models/order');const config = require('config');const chai = require('chai');const chaiHttp = require('chai-http');const server = require('../index');const should = chai.should();chai.use(chaiHttp);describe('Order', () => {    beforeEach((done) => {        Order.deleteMany({}, (err) => {            done();        });    });    describe('/GET orders', () => {        it('it should not GET without auth token', (done) => {            chai.request(server)                .get('/orders')                .end((err, res) => {                    res.should.have.status(401);                    done();                });        });        it('it should GET all the orders', (done) => {            chai.request(server)                .get('/orders')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(200);                    res.body.should.be.a('array');                    res.body.length.should.be.eql(0);                    done();                });        });    });    describe('/POST orders', () => {        it('it should POST a orders', (done) => {            const data = {                staff: "5dd0713430a9086cae1b76b4",                table: 1,                orderItems:[],                newOrderItems:[],                orderPrice: 1,                onKitchen: false,                completed: false,                created_at: new Date(),                updated_at: new Date(),            };            chai.request(server)                .post('/orders')                .set('x-access-token', config.ADMIN_TOKEN)                .send(data)                .end((err, res) => {                    res.should.have.status(201);                    res.body.should.be.a('object');                    res.body.should.have.property('staff');                    res.body.should.have.property('table');                    done();                });        });    });    describe('/GET/:id orders', () => {        it('it should GET a orders by the given id', (done) => {            let data = new Order({                staff: "5dd0713430a9086cae1b76b4",                table: 1,                orderItems:[],                newOrderItems:[],                orderPrice: 1,                onKitchen: false,                completed: false,                created_at: new Date(),                updated_at: new Date(),            });            data.save((err, orders) => {                chai.request(server)                    .get('/orders/' + orders.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send(orders)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.be.a('object');                        res.body.should.have.property('staff');                        res.body.should.have.property('table');                        res.body.should.have.property('_id').eql(orders.id);                        done();                    });            });        });    });    describe('/PUT/:id orders', () => {        it('it should UPDATE a orders given the id', (done) => {            let data = new Order({                staff: "5dd0713430a9086cae1b76b4",                table: 1,                orderItems:[],                newOrderItems:[],                orderPrice: 1,                onKitchen: false,                completed: false,                created_at: new Date(),                updated_at: new Date(),            });            data.save((err, orders) => {                chai.request(server)                    .put('/orders/' + orders.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send({                        staff: "5dd0713430a9086cae1b76b4",                        table: 1,                        orderItems:[],                        newOrderItems:[],                        orderPrice: 1,                        onKitchen: true,                        completed: true,                        created_at: new Date(),                        updated_at: new Date(),                    })                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.be.a('array');                        done();                    });            });        });    });    describe('/DELETE/:id orders', () => {        it('it should DELETE a orders given the id', (done) => {            let data = new Order({                staff: "5dd0713430a9086cae1b76b4",                table: 1,                orderItems:[],                newOrderItems:[],                orderPrice: 1,                onKitchen: false,                completed: false,                created_at: new Date(),                updated_at: new Date(),            });            data.save((err, orders) => {                chai.request(server)                    .delete('/orders/' + orders.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.be.a('string');                        done();                    });            });        });    });});