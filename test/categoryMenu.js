process.env.NODE_ENV = 'test';const Category = require('db-worker/lib/models/category');const config = require('config');const chai = require('chai');const chaiHttp = require('chai-http');const server = require('../index');const should = chai.should();chai.use(chaiHttp);describe('Category Menu', () => {    beforeEach((done) => {        Category.deleteMany({}, (err) => {            done();        });    });    describe('/GET categoryMenus', () => {        it('it should not GET without auth token', (done) => {            chai.request(server)                .get('/categoryMenus')                .end((err, res) => {                    res.should.have.status(401);                    done();                });        });        it('it should GET all the categoryMenus', (done) => {            chai.request(server)                .get('/categoryMenus')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(200);                    res.body.should.be.a('array');                    res.body.length.should.be.eql(0);                    done();                });        });    });    describe('/POST categoryMenus', () => {        it('it should not POST a categoryMenus without admin token', (done) => {            chai.request(server)                .post('/categoryMenus')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(403);                    done();                });        });        it('it should POST a categoryMenus', (done) => {            const data = {                title: "",                description: "",                icon: ""            };            chai.request(server)                .post('/categoryMenus')                .set('x-access-token', config.ADMIN_TOKEN)                .send(data)                .end((err, res) => {                    res.should.have.status(201);                    res.body.should.have.property('message').eql('Successfully created!');                    done();                });        });    });    describe('/GET/:id categoryMenus', () => {        it('it should GET a categoryMenus by the given id', (done) => {            let data = new Category({                title: "",                description: "",                icon: ""            });            data.save((err, categoryMenus) => {                chai.request(server)                    .get('/categoryMenus/' + categoryMenus.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send(categoryMenus)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.be.a('object');                        res.body.should.have.property('title');                        res.body.should.have.property('description');                        res.body.should.have.property('icon');                        res.body.should.have.property('_id').eql(categoryMenus.id);                        done();                    });            });        });    });    describe('/PUT/:id categoryMenus', () => {        it('it should UPDATE a categoryMenus given the id', (done) => {            let data = new Category({                title: "",                description: "",                icon: ""            });            data.save((err, categoryMenus) => {                chai.request(server)                    .put('/categoryMenus/' + categoryMenus.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send({                        title: "1",                        description: "1",                        icon: "1"                    })                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully updated!');                        done();                    });            });        });    });    describe('/DELETE/:id categoryMenus', () => {        it('it should DELETE a categoryMenus given the id', (done) => {            let data = new Category({                title: "",                description: "",                icon: ""            });            data.save((err, categoryMenus) => {                chai.request(server)                    .delete('/categoryMenus/' + categoryMenus.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully deleted!');                        done();                    });            });        });    });});