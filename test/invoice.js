process.env.NODE_ENV = 'test';const Invoice = require('db-worker/lib/models/invoice');const config = require('config');const chai = require('chai');const chaiHttp = require('chai-http');const server = require('../index');const should = chai.should();chai.use(chaiHttp);describe('Invoice', () => {    beforeEach((done) => {        Invoice.deleteMany({}, (err) => {            done();        });    });    describe('/GET invoices', () => {        it('it should not GET without auth token', (done) => {            chai.request(server)                .get('/invoices')                .end((err, res) => {                    res.should.have.status(401);                    done();                });        });        it('it should GET all the invoices', (done) => {            chai.request(server)                .get('/invoices')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(200);                    res.body.should.be.a('array');                    res.body.length.should.be.eql(0);                    done();                });        });    });    describe('/POST invoices', () => {        it('it should POST a invoices', (done) => {            const data = {                invoiceItems:[],                invoicePrice: 1,                staff: "5dd0713430a9086cae1b76b4",                paymentMethod: "",                created_at: new Date()            };            chai.request(server)                .post('/invoices')                .set('x-access-token', config.ADMIN_TOKEN)                .send(data)                .end((err, res) => {                    res.should.have.status(201);                    res.body.should.have.property('message').eql('Successfully created!');                    done();                });        });    });    describe('/GET/:id invoices', () => {        it('it should GET a invoices by the given id', (done) => {            let data = new Invoice({                invoiceItems:[],                invoicePrice: 1,                staff: "5dd0713430a9086cae1b76b4",                paymentMethod: "",                created_at: new Date()            });            data.save((err, invoices) => {                chai.request(server)                    .get('/invoices/' + invoices.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send(invoices)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.be.a('object');                        res.body.should.have.property('invoiceItems');                        res.body.should.have.property('invoicePrice');                        res.body.should.have.property('staff');                        res.body.should.have.property('paymentMethod');                        res.body.should.have.property('created_at');                        res.body.should.have.property('_id').eql(invoices.id);                        done();                    });            });        });    });    describe('/DELETE/:id invoices', () => {        it('it should DELETE a invoices given the id', (done) => {            let data = new Invoice({                invoiceItems:[],                invoicePrice: 1,                staff: "5dd0713430a9086cae1b76b4",                paymentMethod: "",                created_at: new Date()            });            data.save((err, invoices) => {                chai.request(server)                    .delete('/invoices/' + invoices.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully deleted!');                        done();                    });            });        });    });});