process.env.NODE_ENV = 'test';const Ingredient = require('db-worker/lib/models/ingredient');const config = require('config');const chai = require('chai');const chaiHttp = require('chai-http');const server = require('../index');const should = chai.should();chai.use(chaiHttp);describe('Ingredient', () => {    beforeEach((done) => {        Ingredient.deleteMany({}, (err) => {            done();        });    });    describe('/GET ingredients', () => {        it('it should not GET without auth token', (done) => {            chai.request(server)                .get('/ingredients')                .end((err, res) => {                    res.should.have.status(401);                    done();                });        });        it('it should GET all the ingredients', (done) => {            chai.request(server)                .get('/ingredients')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(200);                    res.body.should.be.a('array');                    res.body.length.should.be.eql(0);                    done();                });        });    });    describe('/POST ingredients', () => {        it('it should not POST a ingredients without admin token', (done) => {            chai.request(server)                .post('/ingredients')                .set('x-access-token', config.TOKEN)                .end((err, res) => {                    res.should.have.status(403);                    done();                });        });        it('it should POST a ingredients', (done) => {            const data = {                title: "",                restInStock: 1,                description: "",                price: 1            };            chai.request(server)                .post('/ingredients')                .set('x-access-token', config.ADMIN_TOKEN)                .send(data)                .end((err, res) => {                    res.should.have.status(201);                    res.body.should.be.a('object');                    res.body.should.have.property('title');                    res.body.should.have.property('restInStock');                    res.body.should.have.property('description');                    res.body.should.have.property('price');                    done();                });        });    });    describe('/GET/:id ingredients', () => {        it('it should GET a ingredients by the given id', (done) => {            let data = new Ingredient({                title: "",                restInStock: 1,                description: "",                price: 1            });            data.save((err, ingredients) => {                chai.request(server)                    .get('/ingredients/' + ingredients.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send(ingredients)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.be.a('object');                        res.body.should.have.property('title');                        res.body.should.have.property('restInStock');                        res.body.should.have.property('description');                        res.body.should.have.property('price');                        res.body.should.have.property('_id').eql(ingredients.id);                        done();                    });            });        });    });    describe('/PUT/:id ingredients', () => {        it('it should UPDATE a ingredients given the id', (done) => {            let data = new Ingredient({                title: "",                restInStock: 1,                description: "",                price: 1            });            data.save((err, ingredients) => {                chai.request(server)                    .put('/ingredients/' + ingredients.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .send({                        title: "",                        restInStock: 12,                        description: "",                        price: 1                    })                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully updated!');                        done();                    });            });        });    });    describe('/DELETE/:id ingredients', () => {        it('it should DELETE a ingredients given the id', (done) => {            let data = new Ingredient({                title: "",                restInStock: 1,                description: "",                price: 1            });            data.save((err, ingredients) => {                chai.request(server)                    .delete('/ingredients/' + ingredients.id)                    .set('x-access-token', config.ADMIN_TOKEN)                    .end((err, res) => {                        res.should.have.status(200);                        res.body.should.have.property('message').eql('Successfully deleted!');                        done();                    });            });        });    });});